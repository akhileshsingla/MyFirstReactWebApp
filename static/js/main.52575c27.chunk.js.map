{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","textAlign","padding","background","color","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","float","Todos","todos","map","key","AddTodo","state","event","setState","target","value","onSubmit","preventDefault","addTodo","display","name","flex","placeholder","className","About","Fragment","App","uuid","filter","newTodo","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52575c27.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\n\nfunction Header() {\n  return (\n    <header style = {headerStyle}>\n      <h1> ToDo List </h1>\n      <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\"> About </Link> \n    </header>\n  );\n};\n\nconst headerStyle = {\n  textAlign: 'center',\n  padding: '10px',\n  background: 'black',\n  color: 'white'\n}\n\nconst linkStyle = {\n  color: '#fff',  \n  textDecoration: 'none'\n}\n\nexport default Header;\n","import React, { Component } from 'react'\n\nexport class TodoItem extends Component {\n\n    getStyle = () => {\n        return {\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px dotted',\n            textDecoration: this.props.todo.completed ? \n                'line-through' : 'none'\n        }\n    }\n\n    render() {\n        \n        const {id, title} = this.props.todo;\n\n        return (\n            <div style = {this.getStyle()}>\n                <p>\n                    <input type = \"checkbox\" \n                        onChange = {this.props.markComplete.bind(this, id)}>\n                    </input> {' '}\n\n                    <button style={btnStyle} \n                        onClick = {this.props.delTodo.bind(this, id)}>\n                    x</button>\n                    { title }\n                </p>\n            </div>\n        )\n    }\n\n    \n}\n\nconst btnStyle = {\n color: 'red',\n float: 'right'       \n}\n\nexport default TodoItem\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem'\n\nclass Todos extends Component {\n    render() {\n        return this.props.todos.map( (todo) => (\n        <TodoItem key = {todo.id} \n            todo = {todo} markComplete={this.props.markComplete}\n            delTodo = {this.props.delTodo}    \n        />\n        ));\n    }\n  \n}\n\nexport default Todos;\n","import React, { Component } from 'react';\n\nexport class AddTodo extends Component {\n    state = {\n        title : ''\n    }\n\n    onChange = (event) => {\n        this.setState({\n            title : event.target.value\n        })\n    }\n    \n    onSubmit = (event) => {\n        event.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title: ''});\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\n                <input\n                    type = \"text\"\n                    name = \"title\"\n                    style = {{ flex: '10', padding: '5px'}}\n                    placeholder = \"Add Todo\"\n                    value = { this.state.title}\n                    onChange = {this.onChange}\n                />\n                <input\n                    type = \"submit\"\n                    value = \"submit\"\n                    className = \"btn\"\n                    style = {{ flex: '1'}}\n                />\n            </form>\n        )\n    }\n}\n\nexport default AddTodo;\n","import React from 'react'\n\nfunction About() {\n  return (\n    <React.Fragment>\n      <h1>About</h1>\n      <p>This is the TodoList app v1.0.0. It is part of a React crash course</p>\n    </React.Fragment>\n  )\n}\n\n\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\nimport Header from './components/layout/Header'\nimport Todos from './components/Todos'\nimport AddTodo from './components/AddTodo'\nimport About from './components/pages/About'\nimport uuid from 'react-uuid';\nimport './App.css';\n\nclass App extends Component { \n\n  state = {\n    todos: [\n      {\n        id: uuid(),\n        title: 'Groceries shopping',\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: 'Clean garage',\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: 'Read the book',\n        completed: false\n      }\n    ]\n  }\n\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(\n        todo => {\n          if(todo.id === id) {\n            todo.completed = !todo.completed;\n          }\n          return todo;\n        }\n      )\n    });\n  };\n\n  delTodo = (id) => {\n    this.setState({\n      todos: [...this.state.todos.filter(\n        todo => todo.id !== id\n      )]\n    });\n  };\n\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuid(),\n      title,\n      completed: false\n    }\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header/>\n            <Route exact path=\"/TodoWebApp\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo = {this.addTodo}/>\n                <Todos todos = {this.state.todos}\n                  markComplete = {this.markComplete}\n                  delTodo = {this.delTodo}\n                />\n              </React.Fragment>\n            )}\n            />\n            <Route path=\"/TodoWebApp/about\" component={About}/>\n            \n          </div>\n        </div>\n      </Router>\n      \n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}